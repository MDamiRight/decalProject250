User

The purpose of the user class is to initialize new users and allow them to log in to, log out of, and register accounts. This class is also utilized to manage the activity of a particular user. Their acitivty can span from modifying their cart, login credentials, payment options, or shipping options. This class comes equiped with the data necessary to store a users login in a safe way. A user's username will be stored in a string whereas the password will be sent as a salted hashed from the user to allow for the safe storing of passwords. In the event a data leak occurs, the user's true password won't be exposed. Amongst the login credentials, there are instances of the following classes: Payment, Shipping, and Cart. Payment and Shipping instances are stored in a list to allow for multiple options from the user while the Cart instance exists as a single instance for every User. Function wise, this class can login, logout, and register a user.

Payment

This class, or more so struct, is a collection of data required to make a purchase. Our service only allows payments through direct credit card information. Therefore, this class contains the data required for such a purchase to be made. This is made into a class to allow the possibility of expanding payment options in the future. The user class will also store a list of payments, allowing the user to choose a preferred payment at checkout.

Shipping

Just like the payment class/struct, this collection of data will be the necessary information to ship products to users after a purchase has been made. The user class stores a list of this class to allow for multiple shipping addresses to be stored and chosen at checkout.

Cart

The cart class will be the primary class used to store the items a user has inside their cart. It can be used as a way to organize all their potential purchases before checkout. The only data contained in this class is a map of items a user has selected. A map is used for quick lookup times and the ability to increase/decrease quantity of a particular item. Amongst this, there are functions for adding and removing items from this block of data as well as a function to finally checkout which returns if the checkout was successful or not. As every user is equipped with the potential to purchase, this class will be a member of every user.

Item

This class, similar to a struct, contains the data that every item listed on the website will need. This data includes the name, description, price, and device type. On top of this, this class inherits the class Customizable as every Item we provide is considered customizable. This class also contains a customize function in which a Customizable class is passed. A function is used here to ensure that the requested customization is actually possible with the specific item calling it.

Customizable

This class allows for the further customization of specific items. As every item we sell allows for customization, this class will be inherited by the class Item. The possible types of customization include design, texture, and case type specific choices. These values are stored as enums as we specific options for each. Inheritance is also used here to allow for the modularity object orientation provides; this modularity allows for the ease of changing/adding customizable features to items.